#! /usr/bin/env python3

# <<BEGIN-copyright>>
# Copyright 2022, Lawrence Livermore National Security, LLC.
# See the top-level COPYRIGHT file for details.
# 
# SPDX-License-Identifier: BSD-3-Clause
# <<END-copyright>>

import os
import argparse
import time

from PoPs.chemicalElements import misc as miscModule

massFileDefault = 'xsdir_atomicMasses.dat'
massFileDefault = os.path.join( os.path.realpath( os.path.dirname( __file__ ) ), 'xsdir_atomicMasses.dat' )

parser = argparse.ArgumentParser( description = 'Copy and rename ACE files generated by toACE.py.' )
parser.add_argument( '-d', '--destination', action = 'store', required = True,              help = 'The directory to put the ACE files in.' )
parser.add_argument( '-i', '--ID', action = 'store', type = int,                            help = 'An integer between 0 and 99 representing the evaluation ID.' )
parser.add_argument( '-m', '--massFile', action = 'store', default = massFileDefault,       help = 'The path to a file containing the atom mass. Default = "%s"' % massFileDefault )
parser.add_argument( '-v', '--verbose', action = 'count', default = 0,                      help = 'Verbose mode.' )
parser.add_argument( 'files', nargs = '+',                                                  help = 'List of ACE files to add to xsdir file.' )

args = parser.parse_args( )

if( args.ID is not None ) :
    if( ( args.ID < 0 ) or ( args.ID > 99 ) ) : 
        raise Exception( 'ID = %d must be in the range 0 to 99 inclusive.' % args.ID )

if( not( os.path.exists( args.destination ) ) ) : os.makedirs( args.destination )
ACERoot = os.path.join( args.destination, "ACE" )
if( not( os.path.exists( ACERoot ) ) ) : os.makedirs( ACERoot )

fXSDir = open( os.path.join( args.destination, 'xsdir' ), 'w' )

fXSDir.write( 'atomic weight ratios\n' )
fAW = open( args.massFile )
lines = fAW.readlines( )
fAW.close( )
for line in lines : fXSDir.write( line )

t1 = time.localtime( )
fXSDir.write( "%.2d/%.2d/%.2d\n" % ( t1.tm_mon, t1.tm_mday, t1.tm_year % 100 ) )

fXSDir.write( "directory\n" )

for file in args.files :
    if( args.verbose > 0 ) : print( file )
    fIn = open( file )
    lines = fIn.readlines( )
    fIn.close( )
    tableName = lines[0][:10]
    atomicMassRatio = lines[0][10:22]
    ZAID = lines[1].split( )[0]
    if( '_e' in ZAID ) :
        print('    Skipping meta-stable "%s" target as currently not supported.' % ZAID)
        continue

    ZA, evaluationID = tableName.strip( ).split( '.' )
    ZA = int( ZA )
    Z, A = ZA // 1000, ZA % 1000
    fileName = os.path.join( "ACE", "%.3d_%s_%.3d.ace" % ( Z, miscModule.symbolFromZ[Z], A ) )
    if( args.ID is not None ) : tableName = "%10s" % ( "%d.%.2d%s" % ( ZA, args.ID, evaluationID[-1] ) )

    accessRoute = '0'
    fileType = 1
    address = 1
    tableLength = int( lines[6][:9] )
    recordLength = 0
    numberOfEntriesPerRecord = 0
    temperature = lines[0][22:34]
    fXSDir.write( "%10s %s %s %s %d %d %d %d %d %s\n" % ( tableName, atomicMassRatio, fileName, accessRoute, \
        fileType, address, tableLength, recordLength, numberOfEntriesPerRecord, temperature ) )
    lines[0] = tableName + lines[0][10:]
    fOut = open( os.path.join( args.destination, fileName ), 'w' )
    fOut.writelines( lines )
    fOut.close( )

fXSDir.close( )
